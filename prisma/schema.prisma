// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserLevel {
  Admin
  General
  Supervisor
}

model User {
  id            String     @id @default(cuid())
  username      String?    @unique
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  password      String?
  image         String?
  Session       Session[]
  first_name    String?
  last_name     String?
  role          String?
  level         UserLevel?
  job           String?
  department    String?
  supervisees   User[]     @relation("UserSupervisor")
  supervisor    User?      @relation("UserSupervisor", fields: [supervisorId], references: [id])
  supervisorId  String?

  accounts   Account[]
  teamMember teamMember[]
  task       task[]

  @@map("users")
}

enum StatusTeam {
  InProgress
  Completed
}

model team {
  id         String       @id @default(cuid())
  member     teamMember[]
  department String
  project    String
  startAt    DateTime
  endAt      DateTime
  status     StatusTeam
}

model teamMember {
  id           String    @id @default(cuid())
  teamId       String?
  userId       String?
  isSupervisor Boolean?  @default(false)
  StartAt      DateTime?
  endAt        DateTime?
  user         User?     @relation(fields: [userId], references: [id])
  team         team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum typeOfWork {
  WorkFormHome
  WorkFormOffice
}

model task {
  id          String     @id @default(cuid())
  title       String
  description String
  startAt     DateTime
  endAt       DateTime
  typeOfWork  typeOfWork
  status      String
  userId      String
  user        User?      @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
